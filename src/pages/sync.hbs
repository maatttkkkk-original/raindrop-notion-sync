<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Sync Setup</title>
  <link rel="stylesheet" href="/public/style.css">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
</head>
<body>
  <div class="container">
    <div class="toggle-container">
      <div id="status-indicator" class="toggle-indicator not-synced"></div>
    </div>
    
    <h1 class="sync-title">Sync Setup</h1>
    
    <div class="sync-description">
      <p>Ready to sync your raindrops with Notion. Click the button below to begin.</p>
    </div>
    
    <div id="sync-controls" class="actions-container">
      <button id="start-sync-btn" class="sync-new">Start Sync</button>
      <a href="/?password={{password}}" class="back-button">Back â†¤</a>
    </div>
    
    <div id="sync-progress" class="sync-progress" style="display: none;">
      <div class="sync-stats">
        <span id="added-count">0</span> added, 
        <span id="updated-count">0</span> updated, 
        <span id="skipped-count">0</span> skipped
      </div>
      
      <div class="live-updates" id="updates">
        <div class="sync-item">Starting sync process...</div>
      </div>
      
      <div class="actions-container">
        <button id="cancel-sync-btn" class="back-button" style="background: #e74c3c;">Cancel Sync</button>
      </div>
    </div>
  </div>

  <script>
    const mode = '{{mode}}';
    const password = '{{password}}';
    
    let evtSource = null;
    let syncInProgress = false;
    
    // Elements
    const startBtn = document.getElementById('start-sync-btn');
    const cancelBtn = document.getElementById('cancel-sync-btn');
    const syncControls = document.getElementById('sync-controls');
    const syncProgress = document.getElementById('sync-progress');
    const statusIndicator = document.getElementById('status-indicator');
    
    // Auto-scroll to bottom as updates come in
    function scrollToBottom() {
      window.scrollTo(0, document.body.scrollHeight);
    }
    
    // Update the counters
    function updateCounter(type, value) {
      document.getElementById(type + '-count').textContent = value;
    }
    
    // Add a sync message to the updates list
    function addSyncMessage(message, type = '') {
      const updatesDiv = document.getElementById('updates');
      const messageDiv = document.createElement('div');
      messageDiv.className = `sync-item ${type || ''}`;
      messageDiv.textContent = message;
      updatesDiv.appendChild(messageDiv);
      scrollToBottom();
    }
    
    // Start the sync process
    function startSync() {
      if (syncInProgress) return;
      
      syncInProgress = true;
      
      // Update UI
      syncControls.style.display = 'none';
      syncProgress.style.display = 'block';
      statusIndicator.className = 'toggle-indicator syncing';
      
      // Clear previous messages
      document.getElementById('updates').innerHTML = '<div class="sync-item">Connecting to sync stream...</div>';
      
      // Start EventSource connection
      evtSource = new EventSource(`/sync-stream?password=${password}&mode=${mode}`);
      
      evtSource.onmessage = function(event) {
        try {
          const data = JSON.parse(event.data);
          
          // Add the update message
          if (data.message) {
            addSyncMessage(data.message, data.type || '');
          }
          
          // Update counters if needed
          if (data.counts) {
            updateCounter('added', data.counts.added || 0);
            updateCounter('updated', data.counts.updated || 0);
            updateCounter('skipped', data.counts.skipped || 0);
          }
          
          // If complete, show completion state
          if (data.complete) {
            evtSource.close();
            evtSource = null;
            syncInProgress = false;
            
            // Update UI to show completion
            statusIndicator.className = 'toggle-indicator synced';
            cancelBtn.textContent = 'Return to Dashboard';
            cancelBtn.style.background = '#27ae60';
            cancelBtn.onclick = () => window.location.href = `/?password=${password}`;
          }
        } catch (error) {
          console.error('Error processing message:', error);
          addSyncMessage('Error processing sync message', 'failed');
        }
      };
      
      evtSource.onerror = function(error) {
        console.error('EventSource error:', error);
        
        if (evtSource && evtSource.readyState === EventSource.CLOSED) {
          addSyncMessage('Connection lost. Sync may still be running in the background.', 'failed');
          
          // Allow user to return to dashboard
          cancelBtn.textContent = 'Return to Dashboard';
          cancelBtn.style.background = '#f39c12';
          cancelBtn.onclick = () => window.location.href = `/?password=${password}`;
        }
      };
    }
    
    // Cancel the sync process
    function cancelSync() {
      if (evtSource) {
        evtSource.close();
        evtSource = null;
      }
      
      syncInProgress = false;
      
      // Return to dashboard
      window.location.href = `/?password=${password}`;
    }
    
    // Event listeners
    startBtn.addEventListener('click', startSync);
    cancelBtn.addEventListener('click', cancelSync);
    
    // Add touchstart event listeners for mobile devices
    document.querySelectorAll('a, button').forEach(element => {
      element.addEventListener('touchstart', function() {
        this.classList.add('touched');
      });
      element.addEventListener('touchend', function() {
        this.classList.remove('touched');
      });
    });
    
    // Prevent accidental navigation during sync
    window.addEventListener('beforeunload', function(e) {
      if (syncInProgress) {
        e.preventDefault();
        e.returnValue = 'Sync is in progress. Are you sure you want to leave?';
        return e.returnValue;
      }
    });
  </script>
</body>
</html>